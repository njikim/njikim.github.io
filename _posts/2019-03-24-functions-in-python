
---
layout: post
title: "Lambda, Map, Filter, Reduce"
description: "Lambda, Map, Filter, Reduce function in Python"
date: 2019-03-13
tags: [Python, Lambda, Map, Filter, Reduce]
category: Python
comments: true
share: true
---
Hi! In this post, we are going to deal with some core functions in Python. They might not sounds intuitive at the beginning but once you fully get them, they are super useful! So let's get started.

## Lambda function
> - Doesn't have a limit on parameters
> - You may use it as changing the function or the value of the variables
>  - It can be used by key attributes on list.sort()
>  lambda parameters[...]: expression(formula)

Let's look at this function example.
 ``` 
def sum(x,y):
	return x + y
result = add(2,3)
print(result)
 ```
 <pre class="output">
 5 </pre>

Now, we are going to make this function by using lambda property.
```
result1 = (lambda x,y : x + y)(2,3)
print(result1)
```
<pre class="output">
5 </pre> 

```
func = lambda x,y : x + y
print(func(2,3))
```
<pre class="output">
5 </pre>
```
func1 = lambda x,y=10 : x + y
print(func1(5))
print(func1(5,6))
```
<pre class="output">
15
11 </pre>
```
# mutable variable
func2 = lambda a, *b, **c : print(a,b,c)
func2(1,2,3,n=4,m=5)
```
<pre class="output">
1 (2, 3) {'n': 4, 'm': 5} </pre>
 
 Let's look at another example using list.sort() and lambda function together.
 ```
lst = [1,5,3,9,8,4,2]
lst.sort()
lst
```
<pre class="output">
[1, 2, 3, 4, 5, 8, 9] </pre>
```
lst = [1,5,3,9,8,4,2]
lst.sort(key=lambda a : a)
lst
```
<pre class="output">
[1, 2, 3, 4, 5, 8, 9] </pre>


```
lst1 = [('john', 20, 100),('sally',10,50),('adriene',30, 60)]
lst1.sort(key=lambda a : a[2])
lst1
```
<pre class="output">
[('sally',10,50),('adriene',30, 60),('john', 20, 100)] </pre>

```
# by using lower(), it changes all the alphabet into small letters and sort
lst2 = [('Aa'),('DEF'),('cEf')]
lst2.sort(key=lambda a : a.lower())
lst2
```
<pre class="output">
['Aa', 'cEf', 'DEF'] </pre>

## Map function
> - It applies the given function on the given list and returns the result as another (iterable) list
> - map(func, iterable)

Let's see how this example can be simplified using map function.
```
def calc(x):
	return x*2

b = []
for n in [1,2,3,4]:
	a = calc(n)
	print(a, end=' ')
	b.append(a)
print(b)
print(list(map(calc,[1,2,3,4])))
```
<pre class="output">
[2,4,6,8] </pre>

```
list(map(lambda x: x**2, range(5))
```
<pre class="output"> 
[0, 1, 4, 9, 16] </pre>
```
list(map(lambda x: x**2, [2,2,4,5])
```
<pre class="output">
[4,4,16,25] </pre>

## Reduce function
> - It is mainly used for counting
> - you need to import funtools module in order to use it

```
from functools import reduce
reduce(lambda x,y : x+ y, [1,2,3,4,5])
```
<pre class="output"> 15 </pre>
```
# when there is only one parameter, it gives you an error
reduce(lambda x : x**2, [2,2,4,5])
```
<pre class="output">
TypeError: <lambda>() takes 1 positional argument but 2 were given </pre>

The example above could be extended as python function like this:
```
def userReduce():
	data = [1,2,3,4,5]
	v = 0
	for i in data:
		v = v+ i
	print(v)
userReduce()
```
<pre class="output"> 15 </pre>

## Filter function
> - It can only subtract few parts of the data (it literally filters the data)
> - filter(func, list)

```
list(filter(lambda x : x < 5, range(10)))
```
<pre class="output">
[0,1,2,3,4] </pre>
